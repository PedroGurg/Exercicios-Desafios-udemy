# -*- coding: utf-8 -*-
"""Udemy_derivada_integral_sistema.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hHH0z0SGOHvQze85jqR4irGoDLhzjWYj

# Derivada e integral
"""

import sympy as sp
sp.init_printing()

# eq 1
x,C1,y = sp.symbols(['x','C1','y'])

fx_1 = sp.exp(x)

derivada_1 = sp.diff(fx_1,x)
integral_1 = sp.integrate(fx_1,x)
integral_1+=C1
integral_1

# eq 2
fx_2 = x**3
derivada_2 = sp.diff(fx_2,x)
integral_2 = sp.integrate(fx_2,x)
integral_2+=C1
integral_2

# eq 3 
fx_3 = 1/x
derivada_3 = sp.diff(fx_3,x)
integral_3 = sp.integrate(fx_3,x)
integral_3+=C1
integral_3

#integral dupla
fx = 1

sp.integrate(fx,(x,0,3),(y,0,4))

"""# Soluções sistemas"""

#utilizando solve para achar as soluções
ffx_1 = x**3 + 5*x**2
sp.solve(fx,x)

ffx_2 = x**2 + 9
sp.solve(ffx_2,x)

ffx_3 = sp.sin(x)
sp.solveset(ffx_3)

ffx_4 = x**2 + sp.cos(x)
sp.solveset(ffx_4)

import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(-np.pi,np.pi,10)
list = []
for i in range(len(x)):
  list.append(i**2+sp.cos(i))
plt.plot(x,list)

"""# Sistema"""

x1,x2,x3 = sp.symbols(['x1','x2','x3'])

Matriz_comp = sp.Matrix([[1,1,1],[1,2,2],[2,1,3]])
Matriz_var = sp.Matrix([x1,x2,x3])
Matriz_sol = sp.Matrix([6,9,11])

complet_1 = sp.linsolve((Matriz_comp,Matriz_sol),[x1,x2,x3])
print(complet_1)
# ou

Complet_2 = Matriz_comp * Matriz_var - Matriz_sol
print(sp.solve(Complet_2))